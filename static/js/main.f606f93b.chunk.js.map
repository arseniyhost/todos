{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","setTodos","todos","inputText","setStatus","value","onChange","e","target","type","className","onClick","alert","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","t","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f606f93b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({ setInputText, setTodos, todos, inputText, setStatus }) => {\r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value);\r\n    }\r\n\r\n    const submitTodoHandler = (e) => {\r\n        if (inputText === \"\") {\r\n            alert('Ваше поле пустое! Заполните!')\r\n            e.preventDefault();\r\n        } else {\r\n            e.preventDefault();\r\n            setTodos([\r\n                ...todos, { text: inputText, completed: false, id: Math.random() * 1000 }\r\n            ])\r\n\r\n            setInputText(\"\");\r\n        }\r\n    }\r\n\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n    return (\r\n        <form>\r\n            <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">Все</option>\r\n                    <option value=\"completed\">Завершенные</option>\r\n                    <option value=\"uncompleted\">Незавершенные</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Todo = ({ text, setTodos, todos, todo }) => {\r\n\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter(el => {\r\n            return el.id !== todo.id\r\n        }))\r\n    }\r\n\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(item => {\r\n             if(item.id === todo.id) {\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\n\r\n//import components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {\r\n                    filteredTodos.map(t => {\r\n                        return <Todo\r\n                            setTodos={setTodos}\r\n                            key={t.id}\r\n                            todos={todos}\r\n                            todo={t}\r\n                            text={t.text}\r\n                        />\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n\n  //State\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  // useEffect uses after refresh page \n\n  useEffect(() => {\n    getLocalTodos();\n  }, [])\n\n  // useEffect for save Todos\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status])\n\n  //Functions\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  }\n\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Todo List</h1>\n      </header>\n      <Form\n        todos={todos}\n        setTodos={setTodos}\n        setInputText={setInputText}\n        inputText={inputText}\n        setStatus={setStatus}\n      />\n      <TodoList\n        setTodos={setTodos}\n        todos={todos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}